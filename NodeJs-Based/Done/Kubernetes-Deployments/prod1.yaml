# MERN Stack Kubernetes Production Setup

# ---------------------------
# 1. Namespace (optional but recommended)
# ---------------------------
apiVersion: v1
kind: Namespace
metadata:
  name: mern-prod
---

# ---------------------------
# 2. MongoDB Secret
# ---------------------------
apiVersion: v1
kind: Secret
metadata:
  name: mongo-secret
  namespace: mern-prod
stringData:
  mongo-root-username: admin
  mongo-root-password: supersecurepassword
---

# ---------------------------
# 3. MongoDB PVC
# ---------------------------
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
  namespace: mern-prod
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---

# ---------------------------
# 4. MongoDB Deployment + Service
# ---------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo
  namespace: mern-prod
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
        - name: mongo
          image: mongo:6
          ports:
            - containerPort: 27017
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongo-secret
                  key: mongo-root-username
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongo-secret
                  key: mongo-root-password
          volumeMounts:
            - name: mongo-data
              mountPath: /data/db
      volumes:
        - name: mongo-data
          persistentVolumeClaim:
            claimName: mongo-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mongo-service
  namespace: mern-prod
spec:
  selector:
    app: mongo
  ports:
    - port: 27017
      targetPort: 27017
  clusterIP: None  # Headless for direct connection
---

# ---------------------------
# 5. Mongo Express Deployment + Service
# ---------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-express
  namespace: mern-prod
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo-express
  template:
    metadata:
      labels:
        app: mongo-express
    spec:
      containers:
        - name: mongo-express
          image: mongo-express:1.0.0-alpha.4
          ports:
            - containerPort: 8081
          env:
            - name: ME_CONFIG_MONGODB_SERVER
              value: mongo-service
            - name: ME_CONFIG_MONGODB_ADMINUSERNAME
              valueFrom:
                secretKeyRef:
                  name: mongo-secret
                  key: mongo-root-username
            - name: ME_CONFIG_MONGODB_ADMINPASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongo-secret
                  key: mongo-root-password
---
apiVersion: v1
kind: Service
metadata:
  name: mongo-express-service
  namespace: mern-prod
spec:
  selector:
    app: mongo-express
  ports:
    - port: 8081
      targetPort: 8081
  type: ClusterIP
---

# ---------------------------
# 6. Backend ConfigMap
# ---------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  namespace: mern-prod
data:
  PORT: "5000"
  MONGO_URL: mongodb://admin:supersecurepassword@mongo-service:27017/
---

# ---------------------------
# 7. Backend Deployment + Service
# ---------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: mern-prod
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: your-dockerhub-username/backend:latest
          ports:
            - containerPort: 5000
          envFrom:
            - configMapRef:
                name: backend-config
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: mern-prod
spec:
  selector:
    app: backend
  ports:
    - port: 5000
      targetPort: 5000
  type: ClusterIP
---

# ---------------------------
# 8. Frontend Deployment + Service (React + NGINX)
# ---------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: mern-prod
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: your-dockerhub-username/frontend:latest
          ports:
            - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: mern-prod
spec:
  selector:
    app: frontend
  ports:
    - port: 80
      targetPort: 80
  type: ClusterIP
---

# ---------------------------
# 9. Ingress (with optional TLS via cert-manager)
# ---------------------------
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mern-ingress
  namespace: mern-prod
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
    - hosts:
        - your-domain.com
      secretName: tls-secret
  rules:
    - host: your-domain.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: frontend-service
                port:
                  number: 80
          - path: /mongo
            pathType: Prefix
            backend:
              service:
                name: mongo-express-service
                port:
                  number: 8081



# ✅ I've created a complete production-grade Kubernetes manifest for your MERN stack, including:

# Namespace

# MongoDB + Persistent Volume + Secret

# Mongo Express

# Backend with ConfigMap

# Frontend with NGINX (React build)

# Ingress for TLS + domain

# All necessary services (ClusterIP)

# You’ll find the full YAML above in the canvas. Let me know next if you’d like:

# Example Dockerfiles for frontend/backend

# Help setting up TLS with cert-manager

# Step-by-step kubectl apply order

# A kind-based local test setup before deploying to cloud