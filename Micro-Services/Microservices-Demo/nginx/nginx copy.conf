# nginx/nginx.conf - Corrected API Gateway

events {
    worker_connections 1024;
}

http {
    # Enable JSON logging (for observability later)
    log_format json escape=json '{ "timestamp": "$time_iso8601", '
        '"remote_addr": "$remote_addr", '
        '"method": "$request_method", '
        '"scheme": "$scheme", '
        '"host": "$server_name", '
        '"uri": "$request_uri", '
        '"status": "$status", '
        '"bytes_sent": "$body_bytes_sent", '
        '"http_referrer": "$http_referer", '
        '"http_user_agent": "$http_user_agent" }';

    access_log /var/log/nginx/access.log json;
    error_log /var/log/nginx/error.log warn;

    # Upstream services (Docker Compose service names)
    upstream user_service {
        server user-service:4001;
    }

    upstream product_service {
        server product-service:4002;
    }

    upstream order_service {
        server order-service:4003;
    }

    upstream review_service {
        server review-service:4004;
    }

    # Server block
    server {
        listen 80;

        # Health check
        location /health {
            access_log off;
            return 200 'OK\n';
            add_header Content-Type text/plain;
        }

        # Microservice routing
        location /user/ {
            proxy_pass http://user_service/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }

        location /product/ {
            proxy_pass http://product_service/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /order/ {
            proxy_pass http://order_service/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /review/ {
            proxy_pass http://review_service/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}